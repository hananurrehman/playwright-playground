// Merged tests: search-specific-product.spec.ts + selected-comprehensive.spec.ts
// Generated by automation to combine useful scenarios into one file for convenience.

import { test, expect } from '@playwright/test';

const PRODUCT_URL = 'https://practicesoftwaretesting.com/product/01K7T6DWZJF6QPG9V7NESZT7GY';

test.describe('Playwright agent merged tests', () => {
  test('Search — Find "Combination Pliers"' , async ({ page }) => {
    await test.step('Navigate to home', async () => {
      await page.goto('https://practicesoftwaretesting.com');
    });

    await test.step('Locate search textbox and perform search', async () => {
      const searchBox = page.getByRole('textbox', { name: 'Search' });
      await expect(searchBox).toBeVisible();
      await searchBox.fill('Combination Pliers');
      await searchBox.press('Enter');
    });

    await test.step('Verify product link appears and open product page', async () => {
      const productLink = page.getByRole('link', { name: /^Combination Pliers/i });
      await expect(productLink).toBeVisible({ timeout: 5000 });
      const href = await productLink.getAttribute('href');
      expect(href).toMatch(/^\/product\//);
      await productLink.click();
      await expect(page).toHaveURL(/\/product\//);
      await expect(page.getByRole('heading', { name: /^Combination Pliers/i })).toBeVisible();
    });
  });

  test('Home page smoke', async ({ page }) => {
    await test.step('Navigate to home', async () => {
      await page.goto('https://practicesoftwaretesting.com');
    });
    await test.step('Assert smoke signal visible', async () => {
      await expect(page.getByText('Practice Black Box Testing')).toBeVisible({ timeout: 5000 });
    });
  });

  test('Search — no results handling', async ({ page }) => {
    await test.step('Navigate to home', async () => {
      await page.goto('https://practicesoftwaretesting.com');
    });

    await test.step('Search for a nonexistent string', async () => {
      const searchBox = page.getByRole('textbox', { name: 'Search' });
      await expect(searchBox).toBeVisible();
      const query = 'qwerty-nonexistent-12345';
      await searchBox.fill(query);
      await searchBox.press('Enter');

      const noMatchLink = page.getByRole('link', { name: new RegExp(query, 'i') });
      await expect(noMatchLink).toHaveCount(0, { timeout: 5000 });
    });

    await test.step('Optionally assert no-results message', async () => {
      const noResultsMsg = page.getByText(/no results|nothing found|no products/i);
      if (await noResultsMsg.count()) {
        await expect(noResultsMsg).toBeVisible({ timeout: 1000 });
      }
    });
  });

  test('Filters (category: Pliers)', async ({ page }) => {
    await test.step('Navigate to home', async () => {
      await page.goto('https://practicesoftwaretesting.com');
    });

    await test.step('Apply Pliers filter and assert results', async () => {
      const pliersCheckbox = page.getByRole('checkbox', { name: 'Pliers' });
      if (await pliersCheckbox.count()) {
        await expect(pliersCheckbox).toBeVisible({ timeout: 3000 });
        await pliersCheckbox.check();
        const pliersLink = page.getByRole('link', { name: /Pliers/i }).first();
        await expect(pliersLink).toBeVisible({ timeout: 5000 });
      } else {
        test.skip(true, 'Pliers filter not present on this page');
      }
    });
  });

  test('Sorting changes ordering', async ({ page }) => {
    await test.step('Navigate to home and ensure products present', async () => {
      await page.goto('https://practicesoftwaretesting.com');
      const productsLocator = page.locator('a[href^="/product/"]');
      await expect(productsLocator.first()).toBeVisible({ timeout: 5000 });
    });

    await test.step('Change sort order and verify list is still populated', async () => {
      const productsLocator = page.locator('a[href^="/product/"]');
      const sortBox = page.getByRole('combobox').first();
      if ((await sortBox.count()) > 0) {
        try {
          await sortBox.selectOption({ label: 'Name (A - Z)' });
        } catch {
          const options = await sortBox.locator('option').allTextContents();
          if (options.length > 1) await sortBox.selectOption({ index: 1 });
        }
        const firstAfter = await productsLocator.first().innerText();
        expect(firstAfter).toBeTruthy();
      } else {
        test.skip();
      }
    });
  });

  //Written using Claude
  test('Add product page direct add-to-cart', async ({ page }) => {
    await test.step('Navigate to the website', async () => {
    await page.goto('https://practicesoftwaretesting.com/');
    await expect(page).toHaveTitle(/Practice Software Testing/);
  });

  await test.step('Click on Bolt Cutters product', async () => {
    await page.locator('[data-test="product-name"]').getByText('Bolt Cutters').click();
    await page.waitForTimeout(1000);
  });

  await test.step('Add product to cart', async () => {
    await page.locator('[data-test="add-to-cart"]').click();
    await expect(page.locator('text=Product added to shopping cart')).toBeVisible();
  });

  await test.step('Go to cart', async () => {
    await page.locator('[data-test="nav-cart"]').click();
    await page.waitForTimeout(500);
    await expect(page.locator('[data-test="product-title"]')).toBeVisible();
  });

  await test.step('Delete product from cart', async () => {
    await page.locator('app-root > div svg').first().click();
  });

  await test.step('Verify product deletion confirmation', async () => {
    await expect(page.locator('text=Product deleted.')).toBeVisible();
    await page.waitForTimeout(1500);
    await expect(page.locator('[data-test="product-title"]')).not.toBeVisible();
  });
  });
});
